import { SaveOptions } from 'mongoose';
import {
	createSchema,
	ExtractDoc,
	ExtractProps,
	Type,
	typedModel
} from 'ts-mongoose';
import { ModelFields, createDocument as mongoDocument } from './template/model';

export const ${MODEL}Schema = createSchema({},
	{
		timestamps: {
			createdAt: true,
			updatedAt: true
		}
	}
);

export const ${MODEL} = typedModel('${MODEL}', ${MODEL}Schema, '${COLLECTION}', undefined, {
	createDocument
});

// ----- END OF FILE ----- //

type Document = ExtractDoc<typeof ${MODEL}Schema>;
type Props = ExtractProps<typeof ${MODEL}Schema>;

function createDocument(
	props: ModelFields<Props>,
	options?: SaveOptions
): Promise<Document>;

// eslint-disable-next-line no-redeclare
function createDocument(props: ModelFields<Props>, noSave: boolean): Document;

// eslint-disable-next-line no-redeclare
function createDocument(
	props: ModelFields<Props>,
	optionsOrSave: SaveOptions | boolean = true
): Promise<Document> | Document {
	return mongoDocument(${MODEL}, props, optionsOrSave);
}
